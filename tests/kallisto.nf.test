nextflow_pipeline {

    name "Test pipeline with Kallisto, skipping both QC and alignment"
    script "../main.nf"

    test("Params: --pseudo_aligner kallisto --skip_qc --skip_alignment") {

        when {
            params {
                outdir = "$outputDir"
                pseudo_aligner = 'kallisto'
                skip_qc = true
                skip_alignment = true
            }
        }

        then {
            // path_name_stable: All files + folders in ${params.outdir}/ with a stable name
            def path_name_stable    = UTILS.getAllFilesFromDir(params.outdir, true, UTILS.exclusionRegexesForUnstableFileNames)
            // path_snapshottable: All files in ${params.outdir}/ with stable content
            def path_snapshottable = UTILS.getAllFilesFromDir(params.outdir, false, UTILS.exclusionRegexesForUnstableFileNames + UTILS.exclusionRegexesForUnstableFileContents)

            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of tasks
                    workflow.trace.tasks().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    UTILS.removeNextflowVersion("$outputDir/pipeline_info/nf_core_rnaseq_software_mqc_versions.yml"),
                    // All stable path from which we remove files with stable contents
                    path_name_stable.collect{ file -> path_snapshottable.contains(file) ? null : file.getName()}.findAll{ it },
                    // All files with stable contents
                    path_snapshottable
                ).match() }
            )
        }
    }

    test("Params: --pseudo_aligner kallisto --skip_qc --skip_alignment - stub") {

        options "-stub"

        when {
            params {
                outdir = "$outputDir"
                pseudo_aligner = 'kallisto'
                skip_qc = true
                skip_alignment = true
            }
        }

        then {
            // path_name_stable: All files + folders in ${params.outdir}/ with a stable name
            def path_name_stable    = UTILS.getAllFilesFromDir(params.outdir, true, UTILS.exclusionRegexesForUnstableFileNames)
            // path_snapshottable: All files in ${params.outdir}/ with stable content
            def path_snapshottable = UTILS.getAllFilesFromDir(params.outdir, false, UTILS.exclusionRegexesForUnstableFileNames + UTILS.exclusionRegexesForUnstableFileContents)

            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of tasks
                    workflow.trace.tasks().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    UTILS.removeNextflowVersion("$outputDir/pipeline_info/nf_core_rnaseq_software_mqc_versions.yml"),
                    // All stable path from which we remove files with stable contents
                    path_name_stable.collect{ file -> path_snapshottable.contains(file) ? null : file.getName()}.findAll{ it },
                    // All files with stable contents
                    path_snapshottable
                ).match() }
            )
        }
    }
}
