nextflow_pipeline {

    name "Test pipeline with ribosomal RNA removal"
    script "../main.nf"

    test("Params: --remove_ribo_rna") {

        when {
            params {
                outdir = "$outputDir"
                remove_ribo_rna = true
            }
        }

        then {
            def path_from_outdir   = UTILS.getAllFilesFromDir(params.outdir, null, UTILS.exclusionRegexesForUnstableFileNames)
            def path_snapshottable = UTILS.getAllFilesFromDir(params.outdir, UTILS.snapshottablePatterns, UTILS.exclusionRegexesForUnstableFileContents)

            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.trace.tasks().size(),
                    UTILS.removeNextflowVersion("$outputDir/pipeline_info/nf_core_rnaseq_software_mqc_versions.yml"),
                    path_from_outdir.collect{ file -> path_snapshottable.contains(file) ? null : file.getName()}.findAll{ it },
                    path_snapshottable
                ).match() }
            )
        }
    }

    test("Params: --remove_ribo_rna - stub") {

        options "-stub"

        when {
            params {
                outdir = "$outputDir"
                remove_ribo_rna = true
            }
        }

        then {
            def path_from_outdir   = UTILS.getAllFilesFromDir(params.outdir, null, UTILS.exclusionRegexesForUnstableFileNames)
            def path_snapshottable = UTILS.getAllFilesFromDir(params.outdir, UTILS.snapshottablePatterns, UTILS.exclusionRegexesForUnstableFileContents)

            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.trace.tasks().size(),
                    UTILS.removeNextflowVersion("$outputDir/pipeline_info/nf_core_rnaseq_software_mqc_versions.yml"),
                    path_from_outdir.collect{ file -> path_snapshottable.contains(file) ? null : file.getName()}.findAll{ it },
                    path_snapshottable
                ).match() }
            )
        }
    }
}
