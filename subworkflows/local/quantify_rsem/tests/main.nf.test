nextflow_workflow {

    name "Test Workflow QUANTIFY_RSEM"
    script "../main.nf"
    workflow "QUANTIFY_RSEM"
    config "./nextflow.config"

    tag 'RSEM_CALCULATEEXPRESSION'
    tag 'RSEM_MERGE_COUNTS'
    tag 'BAM_SORT_STATS_SAMTOOLS'

    test("homo_sapiens") {

        setup {
            run("RSEM_PREPAREREFERENCE") {
                script "../../../../modules/nf-core/rsem/preparereference/main.nf"
                process {
                    """
                    input[0] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                    input[1] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true))
                    """
                }
            }
        }

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', strandedness: 'forward' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = RSEM_PREPAREREFERENCE.out.index
                input[2] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }

    }

}
